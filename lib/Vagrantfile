# -*- mode: ruby -*-
# vi: set ft=ruby :
#
# Copyright (c) 2015, Fletcher Nichol
# All rights reserved.
# Source: https://github.com/fnichol/openbsd-builder

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


def arch
  @arch ||= ENV.fetch("ARCH") { abort "ENV['ARCH'] must be set" }
end

def build_script(vars = {})
  script = IO.read("build_stable_release.sh")
  script.insert(
    0,
    vars.map { |k,v| %{#{k}="#{v}"; export #{k}} }.join("\n").concat("\n\n")
  )
  script
end

def release_dir
  File.expand_path(
    ENV.fetch("RELEASEDIR") { abort "ENV['RELEASEDIR'] must be set" },
    ".."
  )
end

def signify_key_pub
  file = "../etc/signify/openbsd-#{version.sub(".", "")}-stable-base.pub"
  if !File.exist?(file)
    abort "File: #{file} not found which is used for release signing"
  end
  IO.read(file).chomp
end

def signify_key_sec
  file = "../etc/signify/openbsd-#{version.sub(".", "")}-stable-base.sec"
  if !File.exist?(file)
    abort "File: #{file} not found which is used for release signing"
  end
  IO.read(file).chomp
end

def vars
  major, minor = version.split(".")

  {
    "ARCH" => arch,
    "BUILDDIR" => "/home/build",
    "CVSROOT" => ENV.fetch("CVSROOT", "anoncvs@anoncvs.comstyle.com:/cvs"),
    "CVS_TAG" => "OPENBSD_#{major}_#{minor}",
    "DEBUG_SCRIPT" => ENV["DEBUG"],
    "FINAL_DESTDIR" => "/usr/local/dest",
    "FINAL_RELEASEDIR" => "/usr/rel",
    "ftp_proxy" => ENV["ftp_proxy"],
    "http_proxy" => ENV["http_proxy"],
    "https_proxy" => ENV["https_proxy"],
    "MIRROR" => File.join(
      "http://",
      ENV.fetch("MIRROR_SERVER", "ftp.openbsd.org"),
      ENV.fetch("MIRROR_DIRECTORY", "pub/OpenBSD/#{version}"),
    ),
    "SIGNIFY_KEY_PUB" => signify_key_pub,
    "SIGNIFY_KEY_SEC" => signify_key_sec
  }
end

def version
  @version ||= ENV.fetch("VERSION") { abort "ENV['VERSION'] must be set" }
end

Vagrant.configure(2) do |config|
  config.vm.box = "fnichol/openbsd-#{version}-#{arch}"

  config.ssh.sudo_command = "doas %c"

  config.vm.synced_folder release_dir, "/usr/rel", type: "nfs"

  config.vm.provision "shell", inline: build_script(vars)

  config.vm.provider :virtualbox do |v, override|
    v.customize ["modifyvm", :id, "--memory", "3072"]
    v.customize ["modifyvm", :id, "--cpus", "4"]
  end

  ["vmware_fusion", "vmware_workstation"].each do |vmware|
    config.vm.provider vmware do |v, override|
      v.vmx["memsize"] = "3072"
      v.vmx["numvcpus"] = "4"
    end
  end
end
